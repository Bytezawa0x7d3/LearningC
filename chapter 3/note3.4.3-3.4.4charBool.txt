char 字符类型
char类型占用内存的八个存储单元
c语言用此类型存储单个字符
使用一个字节 即八位 存储二进制数 在读取和解码时将存储的二进制数字映射为一个ASCII字符
例如一个char类型变量在内存中占八位，位组合是01000001
如果用%d整数转换说明解码 则得到65 被定义为ASCII字符的序号
若使用%c解码 编译器自动将65映射为ASCII字符集中的字符“A” 


声明char字符类型
char response;
char itable, latan;
char grade = 'A';
char broiled;
broiled = 'T';
broiled = T; // T没有单引号 会被解释器视作变量名
broiled = "T"; // 双引号导致解释器视其为字符串而非单个字符


字符以数字形式存储
在内存中字符是以数字形式存储 所以也可以将数字赋值给char类型
char grade = 65; 同等于 char grade = 'A';
但以上写法不是推荐的编程风格


C语言将字符视为int而非char
例如在int为32位、char为8位的ASCII系统中有以下代码
char grade = 'B';
'B'对应的数值66最初被存在32位的存储单元中
赋值给char类型的grade变量后它被存储于8位存储单元中
因此可以定义字符常量'FATE'
这四个ASCII字符会各占8位地存在32位存储单元中
如果将此赋值给char类型变量 便只留下最后八位 即'E'


非打印字符
一些ASCII字符不打印 比如退格、换行或者蜂鸣
有以下两种方法表示非打印字符
1. char beep = 7; // 蜂鸣的ASCII值就是7
2. char nerf = '\n' // 使用转义序列 此处转移符\n为换行符


转义序列
\a 警报 发出警报声
\b 退格
\f 换页 活跃位置移至下一页开始处
\n 换行 活跃位置移至下一行开始处
\r 回车 活跃位置移至当前行开始处
\t 水平制表符 活跃位置移至下一个水平制表点
\v 垂直制表符 活跃位置移至下一个垂直制表点
\\ 反斜杠
\' 单引号
\" 双引号
\? 问号
\0oo 八进制值（oo为有效八进制数 每个o范围是[0, 7]） 即使没有前缀0编译器也会识别为八进制值
\xhh 十六进制值（hh为有效十六进制数 每个h范围是[0, f]）


整形常量例子
type                 hex       octal     dec
char                 \x41      \101      N.A.
int                  0x41      0101      65
unsigned int         0x41U     0101U     65U
long                 0x41L     0101L     65L
unsigned long        0x41UL    0101UL    65UL
long long            0x41LL    0101LL    65LL
unsigned long long   0x41ULL   0101ULL   65ULL


字符类型有无符号
部分编译器将char类型视为有符号类型
数字表示范围为[-128, 127]
其他编译器将char类型视为无符号类型
数字表示范围为[0, 255]
可以查阅编译器手册和limits.h头文件以确定判断方式
目前运行在char前用signed和unsigned修饰
如果只用char处理字符 则无需使用任何修饰
对char字符类型的符号修饰关键字为特殊情况下的备用功能
signed char - 有符号字符类型
unsigned char - 无符号字符类型


_Bool 布尔类型
此类型用于表示布尔值 表示范围{true, false}
在内存中用0和1表示 所以也是一个整数类型
但由于仅需表示两个值 原则上在内存中仅占用一位空间